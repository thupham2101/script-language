options {
   MULTI=true;
   VISITOR=true;
   NODE_DEFAULT_VOID=true;
   NODE_EXTENDS="BaseNode";
}

PARSER_BEGIN(ExpressionParser)

public class ExpressionParser {}

PARSER_END(ExpressionParser)

SKIP :
{ 
	"\t"
	|"\n"
	|"\r"
}

TOKEN : /* action */
{
	   < CREATE: "create" | "CREATE" >
	| < UPDATE : "update" | "UPDATE" >
	|  < DOEXACTLY: "do such that exactly" >
	| <  DOATMOST: "do such that at most" >
//	|  < TABLE: (< STRING >) >
	|  < TABLE: "Car" | "Person" >
	|  < PROP: "color" | "age" >
	|  < VALUE: "white" | "WHITE" >
//	|  <  AND: "AND" >

}

TOKEN :
{
	  < NUMBER : (<DIGIT>)+  >
	| <STRING: (< LETTER >)+ >
}


TOKEN :
{
	  <#DIGIT: ["0"-"9"]>
	| <#LETTER: ["a"-"z", "A"-"Z"]>
}

ASTstart start() #start:{}
{
  (statement())+
  { return jjtThis; }
}

void statement() #Statement:
{}
{
	//identifier()"="expression()";"
		createExpression()
	|   doExactlyExpression()
	|   doAtMostExpression()
	
}

void createExpression() #createStatement:
{}
{
  < CREATE >" "createParameterExpression()";"
}

void createParameterExpression() :
{}
{
	numberExpression()" "tableExpression()
}

void doExactlyExpression() #doExactly:
{}
{
  < DOEXACTLY >" " doParameterExpression()";"
}

void doAtMostExpression() #doAtMost:
{}
{
  < DOATMOST >" " doParameterExpression()";"
}

void doParameterExpression():
{}
{
	numberExpression()" "tableExpression()" "assign()
}



void numberExpression() :
{
}
{
	<NUMBER>
	{ 
		jjtThis.data.put("value",new Integer(Integer.parseInt(token.image)));
	}#Number
}

void tableExpression() :
{
}
{
	<TABLE>
	{ 
		jjtThis.data.put("value",token.image);
	}#Table
}

void assign() :
{}
{
	prop()" = "val()
	
}
void prop() :
{}
{
	<PROP>
	{ 
		jjtThis.data.put("value",token.image);
	}#Property
}

void val() :
{}
{
	<VALUE>
	{ 
		jjtThis.data.put("value",token.image);
	}#Value
}
