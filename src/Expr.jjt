options {
   MULTI=true;
   VISITOR=true;
   NODE_DEFAULT_VOID=true;
   NODE_EXTENDS="BaseNode";
}

PARSER_BEGIN(ExpressionParser)

public class ExpressionParser {}

PARSER_END(ExpressionParser)

SKIP :
{ 
	"\t"
	|"\n"
	|"\r"
}

TOKEN : /* action */
{
	   < ADD: "add" | "ADD" >
	|  < DO: "do" | "DO">
	| < UPDATE : "update" | "UPDATE" >
	| < LINK : "link" | "LINK" >
}

TOKEN : //keywords
{
     	< QUANTIFIER: "EXACTLY" | "AT MOST" | "AT LEAST" >
    |   < SUCH: "SUCH THAT">
    | 	< NUMBER : (<DIGIT>)+  >
	|   < CLASS: "Car" | "Person" >
	|   < PROP: "color" | "name" >
	|   < VALUE: "'white'" | "'no color'" >
}


TOKEN :
{
	  <#DIGIT: ["0"-"9"]>
}

ASTstart start() #start:{}
{
  (statement())+
  { return jjtThis; }
}

void statement() #Statement:
{}
{
		addExpression()
	|   doExpression()	
}

//   ADD EXPRESSION
void addExpression() #addStatement:
{}
{
  < ADD >" "addParameter()";"
}

void addParameter() :
{}
{
	numberExpression()" "classExpression()
}

//   DO EXPRESSION
void doExpression() #doStatement:
{}
{
  < DO >" "doString()";"
}


void doString():
{}
{
	quantifier()" "doSubString()
}

void quantifier():
{}
{
	<QUANTIFIER>
	{ 
		jjtThis.data.put("value",token.image);
	}#Quantifier
}

void doSubString():
{}
{
	doParameter()" "doSubSub()
}

void doParameter():
{}
{
	numberExpression()" "classExpression()
}

void numberExpression() :
{}
{
	<NUMBER>
	{ 
		jjtThis.data.put("value",new Integer(Integer.parseInt(token.image)));
	}#Number
}

void classExpression() :
{}
{
	<CLASS>
	{ 
		jjtThis.data.put("value",token.image);
	}#Class
}

void doSubSub():
{}
{
	< SUCH >" "assignExpression()
}

void assignExpression() :
{}
{
	Property()" = "Value()
	
}

void Property() :
{}
{
	<PROP>
	{ 
		jjtThis.data.put("value",token.image);
	}#Property
}

void Value() :
{}
{
	<VALUE>
	{ 
		jjtThis.data.put("value",token.image);
	}#Value
}

