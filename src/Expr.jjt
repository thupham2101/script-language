options {
   MULTI=true;
   VISITOR=true;
   NODE_DEFAULT_VOID=true;
   VISITOR_DATA_TYPE = "String"; // (default "Object")
   VISITOR_RETURN_TYPE = "String"; // (default "Object")
   NODE_EXTENDS="BaseNode";
   NODE_PREFIX="SSL";
   IGNORE_CASE = true; // (default false)
}

PARSER_BEGIN(ExpressionParser)

public class ExpressionParser {}

PARSER_END(ExpressionParser)

SKIP :
{ 
	"\t"
	|"\n"
	|"\r"
}

TOKEN : /* action */
{
	   < ADD: "ADD" >
	|  < DO: "DO">
	|  < UPDATE : "UPDATE" >
	|  < LINK : "LINK" >
	|  < QUANTIFIER: "EXACTLY" | "AT MOST" | "AT LEAST" >
    |  < SUCH_THAT: "SUCH THAT">
    |  < WITH: "@@WITH" >
    |  < USING: "@@USING" >
    |  < WHERE: "WHERE" >
	|  < AND: "AND" >
	|  < ALL: "*" >
	|  < EOC: ";" >
	|  < ASSIGN	: "=" >
	|  < IN: "IN" >
}

TOKEN : //keywords
{
     < NUMBER : (<DIGIT>)+  >
	|   < STRING: (< LETTER >)+ >
	| 	< WS: (< SPACE >)+ >
}

TOKEN :
{
	  < #DIGIT		: ["0"-"9"]>
	| < #LETTER		: ["A"-"Z", "a"-"z", "'", "-", ">", "(", ")", ":", ".", "|", "=", "<", "0"-"9"] >
	| < #SPACE		: " " >
	
}

SSLStart parse() #Start:{}
{
  (STATEMENT())+
  { return jjtThis; }
}

void STATEMENT():
{}
{
  	EXPRESSION() < EOC > (< WS >)*
}

void EXPRESSION():
{}
{
	ADD_EXPRESSION()
	|   DO_EXPRESSION()
	|	UPDATE_EXPRESSION()
	|   LINK_EXPRESSION()
}

void ADD_EXPRESSION() #AddStatement:
{}
{
  < ADD > (< WS >)+ NUMBER_QUANTITY() (< WS >)+ CLASS_NAME()
}

void NUMBER_QUANTITY() :
{}
{
	<NUMBER>
	{ 
		jjtThis.data.put("value",token.image);
	}#Number
}

void CLASS_PARAMETER():
{}
{
  	CLASS_NUM_PARAMETER()
  	| CLASS_ALL_PARAMETER()
}

void DO_EXPRESSION() #DoStatement:
{}
{
  < DO > (< WS >)+ QUANTIFIER_ENUM() (< WS >)+
  NUMBER_QUANTITY() (< WS >)+ CLASS_NAME() (< WS >)+
  < SUCH_THAT > (< WS >)+ ASSIGNMENTS()
}

void ASSIGNMENTS():
{}
{
	ASSIGNMENT() [(< WS >)+ ADDITIONAL_ASSIGNMENT()]
}

void ADDITIONAL_ASSIGNMENT():
{}
{
	< AND > (< WS >)+ ASSIGNMENTS()
	|	< WHERE > (< WS >)+ CONDITION_BODY()
}

void ASSIGNMENT() #Assignment:
{}
{
	PROPERTY() (< WS >)+ < ASSIGN > (< WS >)+ VALUE()
}

void PROPERTY() :
{}
{
	<STRING>
	{ 
		jjtThis.data.put("value",token.image);
	}#Property
}

void VALUE() :
{}
{
	<STRING>
	{ 
		jjtThis.data.put("value",token.image);
	}#Value
}

void UPDATE_EXPRESSION() #UpdateStatement:
{}
{
  < UPDATE > (< WS >)+ CLASS_PARAMETER() (< WS >)+ ASSIGNMENTS()
}

void LINK_EXPRESSION() #LinkStatement:
{}
{
  < LINK > (< WS >)+ LINK_BODY() 
}

void LINK_BODY():
{}
{
  	NUMBER_QUANTITY() (< WS >)+ CLASS_NAME() 
  	[< WS > < WHERE > (< WS >)+ CONDITION_BODY()]
  	< WITH > (< WS >)+
  	NUMBER_QUANTITY() (< WS >)+ CLASS_NAME() 
  	[< WS > < WHERE > (< WS >)+ CONDITION_BODY()]
  	< USING > (< WS >)+ CLASS_NAME() 
}

void CLASS_ALL_PARAMETER() :
{}
{
	ALL_QUANTITY() (< WS >)+ CLASS_NAME()
}

void CLASS_NUM_PARAMETER() :
{}
{
	NUMBER_QUANTITY() (< WS >)+ CLASS_NAME()
}

void QUANTIFIER_ENUM():
{}
{
	<QUANTIFIER>
	{ 
		jjtThis.data.put("value",token.image);
	}#Quantifier
}



void ALL_QUANTITY() :
{}
{
	<ALL>
	{ 
		jjtThis.data.put("value",token.image);
	}#All
}

void CLASS_NAME() :
{}
{
	<STRING>
	{ 
		jjtThis.data.put("value",token.image);
	}#Class
}

void CONDITION_BODY() #WhereCondition:
{}
{
		ASSIGNMENTS()
	| 	< IN > (< WS >)+ OCL_EXPRESSION()
}

void OCL_EXPRESSION():
{}
{
	<STRING>
	{ 
		jjtThis.data.put("value",token.image);
	}#OclExp
}